import asyncio
import random

import requests
from aiogram import  Bot
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, KeyboardButton
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ aiogram –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.filters.state import StateFilter

from src.api.get_answer import get_answer_stream
from src.handlers.keyboard.keyboard import main_kb  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from src.models.Question import Question
from src.questions import qa

start_router = Router()

class Dialog(StatesGroup):
    admin = State('admin')
    user = State('user')

def create_keyboard():

    keyboard = types.ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text = '–î–∞'), KeyboardButton(text = '–ù–µ—Ç'), KeyboardButton(text = '–ü–æ–¥—Å–∫–∞–∑–∫–∞')]],
        resize_keyboard=True,
        input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é:")
    return keyboard

async def get_qa():
    question_answer = qa
    item = random.choice(question_answer)
    return item[0], item[1]

@start_router.message(Command("user"))
@start_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    await state.set_state(Dialog.user)
    await message.answer('–ù–∞—á–Ω–µ–º! –ü–∏—à–∏ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ!',reply_markup=main_kb(message.from_user.id))


@start_router.message(Command("admin"))
async def start(message: types.Message, state: FSMContext):
    await state.set_state(Dialog.admin)
    question, answer = await get_qa()
    await message.answer(f'<b>–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {question} \n'
                         f' <b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:</b> {answer}',reply_markup=create_keyboard(),parse_mode='HTML')


@start_router.message(StateFilter(Dialog.user))
async def process_message(message: Message, bot:Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç.
    """
    if message.text and len(message.text) > 0:
        if message.text == "üìñ –û –±–æ—Ç–µ":
            await message.reply("<b>RuTube Helper Bot</b> - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. \n"
                                "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –≤–∏–¥–µ–æ , –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞  –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ <b>RuTube</b>‚ùì\n"
                                "–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É. –ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é‚ùì\n"
                                "–ü–æ–ª—É—á–∏ –±—ã—Å—Ç—Ä—ã–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.‚è±Ô∏è",parse_mode='HTML')
        elif message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
            await message.reply("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        else:
            try:
                question = Question(question=message.text)
                message_to_edit = await message.answer("–ò—â—É –æ—Ç–≤–µ—Ç...") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                answer  = await get_answer_stream(question)
                await bot.edit_message_text(
                    text=answer.answer,
                    chat_id=message.chat.id,
                    message_id=message_to_edit.message_id,
                )
            except Exception as e:
                pass

@start_router.message(StateFilter(Dialog.admin))
async def handle_question_yes(message: types.Message):
    if message.text == "–î–∞":
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        await asyncio.sleep(1)
        question, answer = await get_qa()
        await message.answer(f'–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \n {question} –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {answer}')
    elif message.text == "–ù–µ—Ç":
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å")
    elif message.text == "–ü–æ–¥—Å–∫–∞–∑–∫–∞":
        url = "https://ardently-sovereign-coonhound.cloudpub.ru/similar"
        headers = {"Content-Type": "application/json"}
        question = Question(question=message.text)
        answer = requests.post(url, headers=headers, json=question.model_dump()).json()
        await message.answer("```"+"–ü–æ–¥—Å–∫–∞–∑–∫–∞"+ answer[0]['page_content']+"```",parse_mode=ParseMode.MARKDOWN_V2 )
        await asyncio.sleep(1)
        question, answer =  await get_qa()
        await message.answer(f'<b>–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {question} \n'
                             f' <b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:</b> {answer}', parse_mode='HTML')
    else:
        await asyncio.sleep(1)
        question, answer =  await get_qa()
        await message.answer(f'<b>–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {question} \n'
                             f' <b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:</b> {answer}', parse_mode='HTML')




