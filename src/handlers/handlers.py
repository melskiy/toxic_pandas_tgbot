from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message

from src.api.get_answer import get_answer
from src.handlers.keyboard.keyboard import main_kb
from src.models.Question import Question

start_router = Router()

@start_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä CommandStart()',
                         reply_markup=main_kb(message.from_user.id))

@start_router.message()
async def process_message(message: Message):
    if message.text == "üìñ –û –±–æ—Ç–µ":
        await message.reply("<b>RuTube Helper Bot</b> - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. \n"
                            "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –≤–∏–¥–µ–æ , –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞  –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ <b>RuTube</b>‚ùì\n"
                            "–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É. –ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é‚ùì\n"
                            "–ü–æ–ª—É—á–∏ –±—ã—Å—Ç—Ä—ã–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.‚è±Ô∏è",parse_mode='HTML')
    elif message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await message.reply("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    elif message.text == "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å":
        await message.reply("–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif message.text == "üìö –ö–∞—Ç–∞–ª–æ–≥":
        await message.reply("–¢—É—Ç–∞ –±—É–¥—É—Ç –ø—Ä–∏–º–µ—Ä—ã –∫–∞–∫–∏–µ –Ω–∏—Ç—å:\n...")
    else:
        try:
            question = Question(text = message.text)
            answer = await get_answer(question)
            await  message.answer(f"–û—Ç–≤–µ—Ç: {answer.text}\n–ö–ª–∞—Å—Å 1: {answer.class_1}\n–ö–ª–∞—Å—Å 2: {answer.class_2}")

        except Exception as e:

            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
